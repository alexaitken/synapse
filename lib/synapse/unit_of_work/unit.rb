module Synapse
  module UnitOfWork
    # Represents a mechanism for tracking changes to aggregates
    #
    # The typical scope of a unit of work is the execution of a single command. It simplifies
    # the management of resources over an entire transaction. Locks, for example, will only be
    # released when the unit of work is either committed or rolled back.
    #
    # @see CurrentUnit
    # @see DefaultUnit
    class Unit
      include AbstractType

      # Starts this unit of work, preparing it for aggregate and event tracking
      #
      # @raise [InvalidStateError] If this unit of work is already active
      # @return [undefined]
      abstract_method :start

      # Commits this unit of work
      #
      # Tracked aggregates are stored using the mechanism provided by their respective
      # repositories, buffered events are published to their respective event buses, and registered
      # unit listeners are notified of the commit.
      #
      # After the commit, the unit of work is unregistered and cleans up any resources it acquired,
      # whether or not the commit was successful. This effectively means that a rollback is done
      # if the commit operation fails.
      #
      # @raise [InvalidStateError] If this unit of work is not active
      # @return [undefined]
      abstract_method :commit

      # Clears this unit of work of any buffered changes
      #
      # Tracked aggregates and buffered events are discarded and registered unit listeners are
      # notified of the rollback.
      #
      # @param [Exception] cause
      # @return [undefined]
      abstract_method :rollback

      # Registers an aggregate with this unit of work
      #
      # This unit of work adds an event registration listener to the aggregate so that any events
      # generated by the aggregate are published to the given event bus when this unit of work
      # is committed.
      #
      # The provided block is used to persist the aggregate once the unit of work is committed.
      #
      # If an aggregate of the same type and with the same identity is already being tracked by
      # this unit of work, it may be returned instead of the given aggregate.
      #
      # @yield [AggregateRoot]
      # @param [AggregateRoot] aggregate
      # @param [EventBus] event_bus
      # @return [AggregateRoot] The aggregate being tracked by this unit of work
      abstract_method :register_aggregate

      # Registers an event for publication to the given event bus
      #
      # The actual publication of the event can be deferred until this unit of work is committed,
      # or can be done immediately.
      #
      # @param [EventMessage] event
      # @param [EventBus] event_bus
      # @return [undefined]
      abstract_method :publish_event

      # Registers a listener that is notified when the state of this unit of work changes
      #
      # @param [UnitListener] listener
      # @return [undefined]
      abstract_method :register_listener

      # Returns true if this unit of work is currently active
      # @return [Boolean]
      abstract_method :active?

      # Returns true if this unit of work is bound to a transaction
      # @return [Boolean]
      abstract_method :transactional?
    end # Unit
  end # UnitOfWork
end
